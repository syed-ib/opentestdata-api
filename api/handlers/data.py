from json import JSONDecodeError
from ..db.models import Datum, DatumType, Action, ActionType, ItemExistsException
from .auth import auth
from .util import get_datum


@auth()
def create(auth_user, body):
    try:
        datum = Datum.create(author=auth_user,
                             name=body.get('name'),
                             type=DatumType(body.get('type')),
                             value=body.get('value'))
    except JSONDecodeError:
        return dict(error='Could not decode JSON from the value field'), 500
    except ItemExistsException as e:
        return dict(error=str(e), datum_id=e.item_id), 500
    except Exception as e:
        err_msg = str(e)
        return dict(error=f'Could not add datum: {err_msg}'), 500

    Action.create(ActionType.CREATE_DATUM, auth_user, datum)
    return datum.to_obj(whos_asking=auth_user)


@auth()
@get_datum()
def detail(datum, auth_user):
    Action.create(ActionType.LIST_DATUM, auth_user, datum)
    return datum.to_obj(whos_asking=auth_user)


@auth()
@get_datum()
def update(datum, auth_user, body):
    if not auth_user.is_admin and auth_user.id != datum.user_id:
        return dict(error="You don't have permission to update that datum"), 401

    try:
        datum.update(name=body.get('name'),
                     type=DatumType(body.get('type')),
                     value=body.get('value'))
    except Exception as e:
        return dict(
            error=f'Could not update datum: {e}',
            datum_id=datum.id
        ), 500

    Action.create(ActionType.UPDATE_DATUM, auth_user, datum)
    return datum.to_obj(whos_asking=auth_user)
