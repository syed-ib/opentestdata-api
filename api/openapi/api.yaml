openapi: "3.0.0"
info:
  version: 1.0.0
  title: OpenTestData
  license:
    name: MIT
paths:
  /ping:
    get:
      summary: server responds with PONG
      operationId: api.handlers.general.ping
      responses:
        '200':
          $ref: '#/components/responses/PingSuccess'
  /users:
    post:
      summary: Create a new user
      operationId: api.handlers.users.signup
      requestBody:
        description: Data needed to create a new User
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
      responses:
        '200':
          $ref: '#/components/responses/NewUserSuccess'
        '500':
          $ref: '#/components/responses/NewUserError'
  /users/login:
    post:
      summary: Log in and retrieve an access token
      operationId: api.handlers.auth.login
      requestBody:
        description: Login details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Auth token
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                  user_id:
                    type: integer
  /users/resend_confirmation_email:
    post:
      summary: Re-send the confirmation e-mail to the address associated with the logged in user
      operationId: api.handlers.users.resend_confirmation
      requestBody:
        description: Confirmation url to include in the confirmation e-mail
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailResend'
      responses:
        '200':
          description: Successful resend
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
      security:
        - jwt: []
  /users/confirm_email/{token}:
    get:
      summary: Confirm an e-mail address
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: The e-mail confirmation token
      operationId: api.handlers.users.confirm_email
      responses:
        '200':
          description: Auth token
          content:
            application/json:
              schema:
                properties:
                  confirmed:
                    type: boolean
  /users/{id}:
    get:
      summary: Get details of a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      operationId: api.handlers.users.detail
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - jwt: []
    post:
      summary: Update details for a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      operationId: api.handlers.users.update
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - jwt: []
  /users/{id}/avatar:
    get:
      summary: Get avatar image data (this API is only available in the development version of the server)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      operationId: api.handlers.users.get_avatar
      responses:
        '200':
          description: The raw avatar image data
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
    post:
      summary: Upload image data to be used as the user avatar
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      operationId: api.handlers.users.upload_avatar
      requestBody:
        description: Image mime type and data
        required: true
        content:
          application/json:
            schema:
              properties:
                type:
                  type: string
                data:
                  type: string
      responses:
        '200':
          description: The URL for the newly-uploaded image
          content:
            application/json:
              schema:
                type: string
      security:
        - jwt: []
  /users/{id}/promote:
    post:
      summary: Promote a user to an admin (admin authorization required)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      operationId: api.handlers.users.promote
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - jwt: []
  /data:
    post:
      summary: Create a new test datum
      operationId: api.handlers.data.create
      requestBody:
        description: Datum details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatumBase'
      responses:
        '200':
          description: Datum details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datum'
      security:
        - jwt: []
  /data/{id}:
    get:
      summary: Get details of a datum
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The datum ID
      operationId: api.handlers.data.detail
      responses:
        '200':
          description: Datum details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datum'
      security:
        - jwt: []
    post:
      summary: Update a test datum
      operationId: api.handlers.data.update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The datum ID
      requestBody:
        description: Datum details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatumBase'
      responses:
        '200':
          description: Datum details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datum'
      security:
        - jwt: []
  /tests:
    post:
      summary: Create a new test
      operationId: api.handlers.tests.create
      requestBody:
        description: Test details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestBase'
      responses:
        '200':
          description: Test details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
      security:
        - jwt: []
  /tests/{id}:
    get:
      summary: Get details of a test
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The test ID
      operationId: api.handlers.tests.detail
      responses:
        '200':
          description: Test details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
      security:
        - jwt: []
  /search:
    post:
      summary: Search for tests and data
      operationId: api.handlers.search.search
      requestBody:
        description: Search parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchQuery'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
      security:
        - jwt: []

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: api.handlers.auth.check_token
  responses:
    PingSuccess:
      description: Successful ping
      content:
        application/json:
          schema:
            type: string
    NewUserSuccess:
      description: New User
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/User'
    NewUserError:
      description: New User Error
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              error:
                type: string
  schemas:
    Base:
      properties:
        id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    User:
      allOf:
        - $ref: '#/components/schemas/Base'
        - properties:
            username:
              type: string
              maxLength: 80
              minLength: 1
            avatar_url:
              type: string
            bio:
              type: string
            data:
              type: array
              items:
                $ref: '#/components/schemas/Datum'
    SignUp:
      properties:
        username:
          type: string
          maxLength: 80
          minLength: 1
        email:
          type: string
          maxLength: 120
          minLength: 5
        password:
          type: string
          minLength: 8 
        bio:
          type: string
          maxLength: 240
        email_confirmation_url:
          type: string
      required:
        - username
        - email
        - password        
        - bio
        - email_confirmation_url
      additionalProperties: false
    UpdateUser:
      properties:
        email:
          type: string
          maxLength: 120
          minLength: 5
        password:
          type: string
          minLength: 8 
      additionalProperties: false 
    Login:
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      additionalProperties: false 
    DatumBase:
      properties:
        name:
          type: string
          maxLength: 100
          minLength: 1
        type:
          type: string
          enum:
            - 'NULL'
            - BOOL
            - NUM
            - STR
            - OBJ
        value:
          type: string
          maxLength: 1024
      required:
        - name
        - type
        - value
      additionalProperties: false 
    Datum:
      allOf:
        - $ref: '#/components/schemas/DatumBase'
        - $ref: '#/components/schemas/Base'
        - properties:
            user_id:
              type: integer
    EmailResend:
      properties:
        email_confirmation_url:
          type: string
      required:
        - email_confirmation_url
      additionalProperties: false
    TestBase:
      properties:
        name:
          type: string
          maxLength: 160
          minLength: 1
        data:
          type: array
          items:
            $ref: '#/components/schemas/TestData'
      required:
        - name
        - data
      additionalProperties: false 
    Test:
      allOf:
        - $ref: '#/components/schemas/TestBase'
        - $ref: '#/components/schemas/Base'
        - properties:
            user_id:
              type: integer
    TestData:
      properties:
        label:
          type: string
          maxLength: 80
          minLength: 1
        disposition:
          type: string
          enum:
            - NEUTRAL
            - POS
            - NEG
            - EDGE
            - DESTRUCTIVE
        datum_id:
          type: integer
    SearchQuery:
      properties:
        type:
          type: string
          enum:
            - ALL
            - TESTS
            - DATA
        query:
          type: string
          minLength: 2
    SearchResults:
      properties:
        tests:
          type: array
          items:
            $ref: '#/components/schemas/Test'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Datum'
