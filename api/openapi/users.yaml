paths:
  SignUp:
    post:
      summary: Create a new user
      operationId: api.handlers.users.signup
      requestBody:
        $ref: '#/requests/SignUp'
      responses:
        '200':
          $ref: '#/responses/SignUpSuccess'
        '500':
          $ref: '#/responses/SignUpError'
  Login:
    post:
      summary: Log in and retrieve an access token
      operationId: api.handlers.auth.login
      requestBody:
        $ref: '#/requests/Login'
      responses:
        '200':
          $ref: '#/responses/LoginSuccess'
        '500':
          $ref: 'base.yaml#/responses/Error'
  EmailResend:
    post:
      summary: Re-send the confirmation e-mail to the address associated with the logged in user
      operationId: api.handlers.users.resend_confirmation
      requestBody:
        $ref: '#/requests/EmailResend'
      responses:
        '200':
          $ref: '#/responses/EmailResendSuccess'
        '500':
          $ref: 'base.yaml#/responses/Error'
      security:
        - jwt: []
  EmailConfirm:
    get:
      summary: Confirm an e-mail address
      operationId: api.handlers.users.confirm_email
      parameters:
        $ref: '#/parameters/EmailConfirm'
      responses:
        '200':
          $ref: '#/responses/EmailConfirmSuccess'
        '500':
          $ref: 'base.yaml#/responses/Error'
  GetOrUpdateUser:
    get:
      summary: Get details of a user
      operationId: api.handlers.users.detail
      parameters:
        $ref: '#/parameters/UserId'
      responses:
        '200':
          $ref: '#/responses/GetUserSuccess'
        '500':
          $ref: 'base.yaml#/responses/Error'
      security:
        - jwt: []
    post:
      summary: Update details for a user
      operationId: api.handlers.users.update
      parameters:
        $ref: '#/parameters/UserId'
      requestBody:
        $ref: '#/requests/UpdateUser'
      responses:
        '200':
          $ref: '#/responses/UserDetails'
        '500':
          $ref: 'base.yaml#/responses/Error'
      security:
        - jwt: []
  GetOrUpdateAvatar:
    get:
      summary: Get avatar image data (this API is only available in the development version of the server)
      operationId: api.handlers.users.get_avatar
      parameters:
        $ref: '#/parameters/UserId'
      responses:
        '200':
          $ref: '#/responses/Avatar'
        '500':
          $ref: 'base.yaml#/responses/Error'
    post:
      summary: Upload image data to be used as the user avatar
      operationId: api.handlers.users.upload_avatar
      parameters:
        $ref: '#/parameters/UserId'
      requestBody:
        $ref: '#/requests/UpdateAvatar'
      responses:
        '200':
          $ref: '#/responses/UpdateAvatar'
        '500':
          $ref: 'base.yaml#/responses/Error'
      security:
        - jwt: []
  PromoteUser:
    post:
      summary: Promote a user to an admin (admin authorization required)
      operationId: api.handlers.users.promote
      parameters:
        $ref: '#/parameters/UserId'
      responses:
        '200':
          $ref: '#/responses/UserDetails'
        '500':
          $ref: 'base.yaml#/responses/Error'
      security:
        - jwt: []

parameters:
  EmailConfirm:
    - in: path
      name: token
      required: true
      schema:
        type: string
      description: The e-mail confirmation token
  UserId:
    - in: path
      name: id
      required: true
      schema:
        type: integer
        minimum: 1
      description: The user ID

requests:
  SignUp:
    description: Data needed to create a new User
    required: true
    content:
      application/json:
        schema:
          $ref: '#/schemas/SignUp'
  Login:
    description: Login details
    required: true
    content:
      application/json:
        schema:
          $ref: '#/schemas/Login'
  EmailResend:
    description: Confirmation url to include in the confirmation e-mail
    required: true
    content:
      application/json:
        schema:
          $ref: '#/schemas/EmailResend'
  UpdateUser:
    description: User details
    required: true
    content:
      application/json:
        schema:
          $ref: '#/schemas/UpdateUser'
  UpdateAvatar:
    description: Image mime type and data
    required: true
    content:
      application/json:
        schema:
          properties:
            type:
              type: string
            data:
              type: string
    

responses:
  SignUpSuccess:
    description: New User
    content:
      application/json:
        schema:
          type: object
          $ref: '#/schemas/User'
  SignUpError:
    description: New User Error
    content:
      application/json:
        schema:
          type: object
          properties:
            username:
              type: string
            email:
              type: string
            error:
              type: string
  LoginSuccess:
    description: Auth token
    content:
      application/json:
        schema:
          properties:
            token:
              type: string
            user_id:
              type: integer
  EmailResendSuccess:
    description: Successful resend
    content:
      application/json:
        schema:
          properties:
            success:
              type: boolean
  EmailConfirmSuccess:
    description: Auth token
    content:
      application/json:
        schema:
          properties:
            confirmed:
              type: boolean
  GetUserSuccess:
    description: User details
    content:
      application/json:
        schema:
          $ref: '#/schemas/User'
  UserDetails:
    description: User details
    content:
      application/json:
        schema:
          $ref: '#/schemas/User'
  Avatar:
    description: The raw avatar image data
    content:
      image/jpeg:
        schema:
          type: string
          format: binary
  UpdateAvatar:
    description: The URL for the newly-uploaded image
    content:
      application/json:
        schema:
          type: string

schemas:
  SignUp:
    properties:
      username:
        type: string
        maxLength: 80
        minLength: 1
      email:
        type: string
        maxLength: 120
        minLength: 5
      password:
        type: string
        minLength: 8 
      bio:
        type: string
        maxLength: 240
      email_confirmation_url:
        type: string
    required:
      - username
      - email
      - password        
      - bio
      - email_confirmation_url
    additionalProperties: false
  Login:
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password
    additionalProperties: false 
  User:
    allOf:
      - $ref: 'base.yaml#/schemas/Base'
      - properties:
          username:
            type: string
            maxLength: 80
            minLength: 1
          avatar_url:
            type: string
          bio:
            type: string
          data:
            type: array
            items:
              $ref: 'data.yaml#/schemas/Datum'
  EmailResend:
    properties:
      email_confirmation_url:
        type: string
    required:
      - email_confirmation_url
    additionalProperties: false
  UpdateUser:
    properties:
      email:
        type: string
        maxLength: 120
        minLength: 5
      password:
        type: string
        minLength: 8 
    additionalProperties: false 
